diff --git a/CMakeLists.txt b/CMakeLists.txt
index 10c321f..13310b2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -107,13 +107,7 @@ set(SLEEF_ALL_SUPPORTED_EXTENSIONS
   )
 
 set(SLEEF_SUPPORTED_LIBM_EXTENSIONS
-  AVX512FNOFMA AVX512F AVX2 AVX2128 FMA4 AVX SSE4 SSE2  # x86
-  SVENOFMA SVE ADVSIMDNOFMA ADVSIMD                     # Aarch64
-  NEON32 NEON32VFPV4                                    # Aarch32
-  VSX VSXNOFMA VSX3 VSX3NOFMA                           # PPC64
-  VXE VXENOFMA VXE2 VXE2NOFMA                           # IBM Z
-  RVVM1NOFMA RVVM1 RVVM2NOFMA RVVM2                     # RISC-V Vectors
-  PUREC_SCALAR PURECFMA_SCALAR                          # Generic type
+  SSE2
   CACHE STRING "List of SIMD architectures supported by libsleef."
   )
 set(SLEEF_SUPPORTED_GNUABI_EXTENSIONS 
diff --git a/Configure.cmake b/Configure.cmake
index 7c64ce9..16c1dfd 100644
--- a/Configure.cmake
+++ b/Configure.cmake
@@ -158,7 +158,7 @@ endif()
 # Allow to define the Gcc/Clang here
 # As we might compile the lib with MSVC, but generates bitcode with CLANG
 # Intel vector extensions.
-set(CLANG_FLAGS_ENABLE_SSE2 "-msse2")
+set(CLANG_FLAGS_ENABLE_SSE2 "-msimd128")
 set(CLANG_FLAGS_ENABLE_SSE4 "-msse4.1")
 set(CLANG_FLAGS_ENABLE_AVX "-mavx")
 set(CLANG_FLAGS_ENABLE_FMA4 "-mfma4")
@@ -380,18 +380,19 @@ endif()
 option(SLEEF_DISABLE_SSE2 "Disable SSE2" OFF)
 option(SLEEF_ENFORCE_SSE2 "Build fails if SSE2 is not supported by the compiler" OFF)
 
-if(SLEEF_ARCH_X86 AND NOT SLEEF_DISABLE_SSE2)
-  string (REPLACE ";" " " CMAKE_REQUIRED_FLAGS "${FLAGS_ENABLE_SSE2}")
-  CHECK_C_SOURCE_COMPILES("
-  #if defined(_MSC_VER)
-  #include <intrin.h>
-  #else
-  #include <x86intrin.h>
-  #endif
-  int main() {
-    __m128d r = _mm_mul_pd(_mm_set1_pd(1), _mm_set1_pd(2)); }"
-    COMPILER_SUPPORTS_SSE2)
-endif()
+#if(SLEEF_ARCH_X86 AND NOT SLEEF_DISABLE_SSE2)
+#  string (REPLACE ";" " " CMAKE_REQUIRED_FLAGS "${FLAGS_ENABLE_SSE2}")
+#  CHECK_C_SOURCE_COMPILES("
+#  #if defined(_MSC_VER)
+#  #include <intrin.h>
+#  #else
+#  #include <x86intrin.h>
+#  #endif
+#  int main() {
+#    __m128d r = _mm_mul_pd(_mm_set1_pd(1), _mm_set1_pd(2)); }"
+#    COMPILER_SUPPORTS_SSE2)
+#endif()
+set(COMPILER_SUPPORTS_SSE2 TRUE)
 
 if (SLEEF_ENFORCE_SSE2 AND NOT COMPILER_SUPPORTS_SSE2)
   message(FATAL_ERROR "SLEEF_ENFORCE_SSE2 is specified and that feature is disabled or not supported by the compiler")
@@ -421,7 +422,7 @@ endif()
 
 # AVX
 
-option(SLEEF_ENFORCE_AVX "Disable AVX" OFF)
+option(SLEEF_DISABLE_AVX "Disable AVX" OFF)
 option(SLEEF_ENFORCE_AVX "Build fails if AVX is not supported by the compiler" OFF)
 
 if(SLEEF_ARCH_X86 AND NOT SLEEF_DISABLE_AVX)
diff --git a/src/arch/helpersse2.h b/src/arch/helpersse2.h
index ae98add..d019e65 100644
--- a/src/arch/helpersse2.h
+++ b/src/arch/helpersse2.h
@@ -46,7 +46,7 @@
 #if defined(_MSC_VER)
 #include <intrin.h>
 #else
-#include <x86intrin.h>
+#include "compat/immintrin.h"
 #endif
 
 #include <stdint.h>
diff --git a/src/libm/CMakeLists.txt b/src/libm/CMakeLists.txt
index 2329e33..ecb0c63 100644
--- a/src/libm/CMakeLists.txt
+++ b/src/libm/CMakeLists.txt
@@ -200,7 +200,7 @@ foreach(SIMD ${SLEEF_HEADER_LIST})
   list(APPEND SLEEF_HEADER_SIMD_SECTIONS ${SIMD_SECTION_FILE})
   add_custom_command(
     OUTPUT ${SIMD_SECTION_FILE}
-    COMMAND $<TARGET_FILE:${TARGET_MKRENAME}> ${HEADER_PARAMS_${SIMD}} > ${SIMD_SECTION_FILE}
+    COMMAND wasmtime $<TARGET_FILE:${TARGET_MKRENAME}> ${HEADER_PARAMS_${SIMD}} > ${SIMD_SECTION_FILE}
     DEPENDS ${TARGET_MKRENAME}
   )
 endforeach()
@@ -236,7 +236,7 @@ foreach(SIMD ${SLEEF_SUPPORTED_LIBM_EXTENSIONS})
     # Generate mkrename commands
     add_custom_command(OUTPUT ${HEADER_${SIMD}}
       COMMAND echo Generating rename${vecarch}.h: ${TARGET_MKRENAME} ${RENAME_PARAMS_${SIMD}}
-      COMMAND $<TARGET_FILE:${TARGET_MKRENAME}> ${RENAME_PARAMS_${SIMD}} > ${HEADER_${SIMD}}
+      COMMAND wasmtime $<TARGET_FILE:${TARGET_MKRENAME}> ${RENAME_PARAMS_${SIMD}} > ${HEADER_${SIMD}}
       DEPENDS ${TARGET_MKRENAME}
     )
     add_custom_target(rename${SIMD}.h_generated DEPENDS ${HEADER_${SIMD}})
@@ -249,7 +249,7 @@ set(HEADER_CUDA ${CMAKE_CURRENT_BINARY_DIR}/include/renamecuda.h)
 list(APPEND HEADER_FILES_GENERATED ${HEADER_CUDA})
 add_custom_command(OUTPUT ${HEADER_CUDA}
   COMMAND echo Generating renamecuda.h: ${TARGET_MKRENAME} ${RENAME_PARAMS_CUDA}
-  COMMAND $<TARGET_FILE:${TARGET_MKRENAME}> ${RENAME_PARAMS_CUDA} > ${HEADER_CUDA}
+  COMMAND wasmtime $<TARGET_FILE:${TARGET_MKRENAME}> ${RENAME_PARAMS_CUDA} > ${HEADER_CUDA}
   DEPENDS ${TARGET_MKRENAME}
   )
 add_custom_target(renameCUDA.h_generated DEPENDS ${HEADER_CUDA})
@@ -274,7 +274,7 @@ if(ENABLE_GNUABI)
       # Generate mkrename_gnuabi commands
       add_custom_command(OUTPUT ${HEADER_${SIMD}_GNUABI}
         COMMAND echo Generating rename${vecarch}_gnuabi.h: ${TARGET_MKRENAME_GNUABI} ${RENAME_PARAMS_GNUABI_${SIMD}}
-        COMMAND $<TARGET_FILE:${TARGET_MKRENAME_GNUABI}> ${RENAME_PARAMS_GNUABI_${SIMD}} > ${HEADER_${SIMD}_GNUABI}
+        COMMAND wasmtime $<TARGET_FILE:${TARGET_MKRENAME_GNUABI}> ${RENAME_PARAMS_GNUABI_${SIMD}} > ${HEADER_${SIMD}_GNUABI}
         DEPENDS ${TARGET_MKRENAME_GNUABI}
       )
       # set_source_files_properties(${HEADER_${SIMD}_GNUABI} PROPERTIES GENERATED TRUE)
@@ -299,7 +299,7 @@ if(ENABLE_GNUABI)
 	list(APPEND HEADER_GENERATED ${HEADER_MASKED_${SIMD}_${T}_GNUABI})
 
 	add_custom_command(OUTPUT ${HEADER_MASKED_${SIMD}_${T}_GNUABI}
-          COMMAND $<TARGET_FILE:${TARGET_MKMASKED_GNUABI}> ${MKMASKED_PARAMS_GNUABI_${SIMD}_${T}} > ${HEADER_MASKED_${SIMD}_${T}_GNUABI}
+          COMMAND wasmtime $<TARGET_FILE:${TARGET_MKMASKED_GNUABI}> ${MKMASKED_PARAMS_GNUABI_${SIMD}_${T}} > ${HEADER_MASKED_${SIMD}_${T}_GNUABI}
           DEPENDS ${TARGET_MKMASKED_GNUABI}
 	  )
       endforeach()
@@ -437,12 +437,12 @@ foreach(SIMD ${SLEEF_SUPPORTED_LIBM_EXTENSIONS})
     else()
       add_custom_command(
 	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/alias_${SIMD}_dp.h.tmp
-	COMMAND $<TARGET_FILE:${TARGET_MKALIAS}> ${ALIAS_PARAMS_${SIMD}_DP} > ${CMAKE_CURRENT_BINARY_DIR}/alias_${SIMD}_dp.h.tmp
+	COMMAND wasmtime $<TARGET_FILE:${TARGET_MKALIAS}> ${ALIAS_PARAMS_${SIMD}_DP} > ${CMAKE_CURRENT_BINARY_DIR}/alias_${SIMD}_dp.h.tmp
 	DEPENDS ${TARGET_MKALIAS}
 	)
       add_custom_command(
 	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/alias_${SIMD}_sp.h.tmp
-	COMMAND $<TARGET_FILE:${TARGET_MKALIAS}> ${ALIAS_PARAMS_${SIMD}_SP} > ${CMAKE_CURRENT_BINARY_DIR}/alias_${SIMD}_sp.h.tmp
+	COMMAND wasmtime $<TARGET_FILE:${TARGET_MKALIAS}> ${ALIAS_PARAMS_${SIMD}_SP} > ${CMAKE_CURRENT_BINARY_DIR}/alias_${SIMD}_sp.h.tmp
 	DEPENDS ${TARGET_MKALIAS}
 	)
       sleef_concat_files(
@@ -686,44 +686,44 @@ target_sources(${TARGET_LIBSLEEF} PRIVATE $<TARGET_OBJECTS:${TARGET_LIBCOMMON_OB
 
 # --------------------------------------------------------------------
 
-# Target dispscalar.c
+# # Target dispscalar.c
 
-add_custom_command(
-  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c.body
-  COMMAND $<TARGET_FILE:${TARGET_MKDISP}> 1 1 double float int32_t purec purecfma x > ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c.body
-  DEPENDS ${TARGET_MKDISP}
-  )
+# add_custom_command(
+#   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c.body
+#   COMMAND wasmtime $<TARGET_FILE:${TARGET_MKDISP}> 1 1 double float int32_t purec purecfma x > ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c.body
+#   DEPENDS ${TARGET_MKDISP}
+#   )
 
-sleef_concat_files(
-  OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c
-  SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/dispscalar.c.org
-          ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c.body
-	  ${CMAKE_CURRENT_SOURCE_DIR}/dispscalar_footer.c.org
-)
-add_custom_target(dispscalar.c_generated SOURCES ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c)
+# sleef_concat_files(
+#   OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c
+#   SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/dispscalar.c.org
+#           ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c.body
+# 	  ${CMAKE_CURRENT_SOURCE_DIR}/dispscalar_footer.c.org
+# )
+# add_custom_target(dispscalar.c_generated SOURCES ${CMAKE_CURRENT_BINARY_DIR}/dispscalar.c)
 
-# Target renamedspscalar.h
+# # Target renamedspscalar.h
 
-add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/include/renamedspscalar.h
-  COMMAND $<TARGET_FILE:${TARGET_MKRENAME}> - 1 1 > ${CMAKE_CURRENT_BINARY_DIR}/include/renamedspscalar.h
-  DEPENDS ${TARGET_MKRENAME}
-  )
-add_custom_target(renamedspscalar.h_generated SOURCES ${CMAKE_CURRENT_BINARY_DIR}/include/renamedspscalar.h)
+# add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/include/renamedspscalar.h
+#   COMMAND wasmtime $<TARGET_FILE:${TARGET_MKRENAME}> - 1 1 > ${CMAKE_CURRENT_BINARY_DIR}/include/renamedspscalar.h
+#   DEPENDS ${TARGET_MKRENAME}
+#   )
+# add_custom_target(renamedspscalar.h_generated SOURCES ${CMAKE_CURRENT_BINARY_DIR}/include/renamedspscalar.h)
 
-# Target dispscalar_obj
+# # Target dispscalar_obj
 
-add_library(dispscalar_obj OBJECT dispscalar.c)
-set_target_properties(dispscalar_obj PROPERTIES ${COMMON_TARGET_PROPERTIES})
-target_compile_definitions(dispscalar_obj PRIVATE ${COMMON_TARGET_DEFINITIONS})
-target_include_directories(dispscalar_obj PRIVATE ${sleef_BINARY_DIR}/include)
-add_dependencies(dispscalar_obj dispscalar.c_generated renamedspscalar.h_generated ${TARGET_HEADERS})
-target_sources(${TARGET_LIBSLEEF} PRIVATE $<TARGET_OBJECTS:dispscalar_obj>)
+# add_library(dispscalar_obj OBJECT dispscalar.c)
+# set_target_properties(dispscalar_obj PROPERTIES ${COMMON_TARGET_PROPERTIES})
+# target_compile_definitions(dispscalar_obj PRIVATE ${COMMON_TARGET_DEFINITIONS})
+# target_include_directories(dispscalar_obj PRIVATE ${sleef_BINARY_DIR}/include)
+# add_dependencies(dispscalar_obj dispscalar.c_generated renamedspscalar.h_generated ${TARGET_HEADERS})
+# target_sources(${TARGET_LIBSLEEF} PRIVATE $<TARGET_OBJECTS:dispscalar_obj>)
 
 #
 
 function(sleef_generate_disp_simd simd)
   add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/disp${simd}.c.tmp
-    COMMAND $<TARGET_FILE:${TARGET_MKDISP}> "${ARGN}" > ${CMAKE_CURRENT_BINARY_DIR}/disp${simd}.c.tmp
+    COMMAND wasmtime $<TARGET_FILE:${TARGET_MKDISP}> "${ARGN}" > ${CMAKE_CURRENT_BINARY_DIR}/disp${simd}.c.tmp
     DEPENDS ${TARGET_MKDISP}
     COMMAND_EXPAND_LISTS
     )
@@ -735,7 +735,7 @@ endfunction()
 
 function(sleef_generate_rename_simd simd)
   add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/include/renamed${simd}.h
-    COMMAND $<TARGET_FILE:${TARGET_MKRENAME}> "${ARGN}" > ${CMAKE_CURRENT_BINARY_DIR}/include/renamed${simd}.h
+    COMMAND wasmtime $<TARGET_FILE:${TARGET_MKRENAME}> "${ARGN}" > ${CMAKE_CURRENT_BINARY_DIR}/include/renamed${simd}.h
     DEPENDS ${TARGET_MKRENAME}
     COMMAND_EXPAND_LISTS
     )
